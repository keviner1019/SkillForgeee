generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  email           String   @unique
  password        String 
  creditBalance   Int      @default(0) 
  stripeAccountId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  createdLearningPaths LearningPath[] @relation("PathOwner")
  collaborations       Collaboration[]
  purchasedPaths       UserPurchasedPath[]
  sentCollaborationRequests CollaborationRequest[] @relation("RequestSender")
  receivedCollaborationRequests CollaborationRequest[] @relation("RequestReceiver")
  withdrawalRequests            WithdrawalRequest[]
  sentTransactions     Transaction[]     @relation("Sender")
  receivedTransactions Transaction[]     @relation("Receiver")
}

model LearningPath {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  price       Int     @default(0) 
  isPublic    Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 
  owner   User @relation("PathOwner", fields: [ownerId], references: [id])
  ownerId Int
  nodes Node[]
  collaborators  Collaboration[]
  purchasedBy    UserPurchasedPath[]
  collaborationRequests CollaborationRequest[]
  @@index([ownerId])
}

model Node {
  id               Int       @id @default(autoincrement())
  title            String
  description      String?
  status           NodeStatus @default(NOT_STARTED)
  notificationDate DateTime?
  color            String?
  positionX        Float?
  positionY        Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt 
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId Int
  parent         Node?        @relation("NodeHierarchy", fields: [parentNodeId], references: [id], onDelete: Cascade)
  parentNodeId   Int?
  children       Node[]       @relation("NodeHierarchy")
  
  @@index([learningPathId])
}

model Collaboration {
  id               Int     @id @default(autoincrement())
  role             CollaborationRole
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  learningPath     LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId   Int
  @@unique([userId, learningPathId])
  @@index([userId])
  @@index([learningPathId])
}


model CollaborationRequest {
  id             Int      @id @default(autoincrement())
  offeredRole    CollaborationRole
  status         CollaborationStatus @default(PENDING)
  createdAt      DateTime @default(now())
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId Int
  sender         User     @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       Int
  receiver       User     @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId     Int
  @@index([receiverId, status])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  type      TransactionType
  amount    Int
  createdAt DateTime @default(now())
  sender    User @relation("Sender", fields: [senderId], references: [id])
  senderId  Int
  receiver  User @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int
  @@index([senderId])
  @@index([receiverId])
}

model UserPurchasedPath {
  id              Int      @id @default(autoincrement())
  purchasePrice   Int
  purchasedAt     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  learningPath    LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId  Int
  @@unique([userId, learningPathId])
  @@index([userId])
}


model WithdrawalRequest {
  id               Int      @id @default(autoincrement())
  amountCredits    Int
  amountRM         Float
  platformFeeRM    Float
  finalPayoutRM    Float
  status           WithdrawalStatus @default(PENDING)
  stripeTransferId String?          @unique
  createdAt        DateTime         @default(now())
  processedAt      DateTime?

  
  
  user   User @relation(fields: [userId], references: [id])
  userId Int

  
  
  @@index([userId])
  @@index([status])
}







enum CollaborationRole {
  EDITOR
  VIEWER
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NodeStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}


enum TransactionType {
  PLATFORM_CREDIT_PURCHASE 
  PATH_PURCHASE            
  USER_WITHDRAWAL          
  WITHDRAWAL_FEE           
}


enum WithdrawalStatus {
  PENDING
  APPROVED 
  COMPLETED
  REJECTED
  FAILED
}